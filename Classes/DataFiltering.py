import sys
from pathlib import Path
from functools import reduce
from peewee import ModelSelect, TextField

sys.path.append(str(Path.cwd()))

from Classes.Func.KitTools import measure, ConfigRead
from Classes.ORM.basic import OutcomeExWean, ExtubePrep, WeanPrep
from Classes.ORM.cate import ExtubePSV, ExtubeSumP12, ExtubeNotPSV, WeanPSV, WeanSumP12, WeanNotPSV

mode_info = {
    'Extube': {
        'class': ExtubePrep,
        'd_e_s': OutcomeExWean.we_s,
        'd_e_t': OutcomeExWean.we_t
    },
    'Wean': {
        'class': WeanPrep,
        'd_e_s': OutcomeExWean.ex_s,
        'd_e_t': OutcomeExWean.ex_t
    }
}


class DataMainFilt():
    def __init__(self, mode_: str):
        self.__mode = mode_
        self.__src_0 = OutcomeExWean
        self.__src_1 = mode_info[mode_]['class']
        self.__end_s = mode_info[mode_]['d_e_s']

    def __QueOnConds(self, que: ModelSelect, cond_l: list) -> ModelSelect:
        '''
        Query results generated by a series of conditions
        que: query obj by selecting
        cond_l: condtion list (&)
        '''
        cond_l = [cond_l] if type(cond_l) != list else cond_l
        cond = reduce(lambda x, y: x & y, cond_l)
        return que.where(cond)

    def __PosNegCond(self, col: TextField) -> ModelSelect:
        '''
        Condtion list about operation end
        col: column obj
        '''
        cond_0 = col.contains('成功')
        cond_1 = col.contains('失败')
        return cond_0, cond_1

    def __InitialQue(self) -> ModelSelect:
        '''
        Table 0 total
        '''
        que = self.__src_0.select()
        return que

    def __PartialQue(self) -> ModelSelect:
        '''
        Table 0 & Table 1 total
        '''
        join_d = {
            'dest': self.__src_0,
            'on': (self.__src_0.pid == self.__src_1.pid),
            'attr': 'binfo'
        }
        que = self.__src_1.select().join(**join_d)
        return que

    def ValQueGen(self, save_path: Path) -> ModelSelect:
        src_1 = self.__src_1

        que_0 = self.__InitialQue()
        que_1 = self.__PartialQue()

        # src_0 filt condition(mainly about opreation exist)
        c_op = ~self.__end_s.is_null()
        c_op_0, c_op_1 = self.__PosNegCond(self.__end_s)

        tot = self.__QueOnConds(que_0, [c_op])
        tot_0 = self.__QueOnConds(que_0, [c_op, c_op_0])
        tot_1 = self.__QueOnConds(que_0, [c_op, c_op_1])

        # src_1 filt condition(mainly about rec validation)
        gp_col = [src_1.pid]
        c_rot = ~src_1.rot.is_null()
        c_rec = ~src_1.zdt.is_null() & ~src_1.zpx.is_null()
        c_v60 = ~src_1.mch.contains('V60')
        c_840 = ~src_1.mch.in_(['840-4', '840-22'])
        c_0, c_1 = self.__PosNegCond(src_1.e_s)

        rot_est = self.__QueOnConds(que_1, [c_rot])
        rec_est = self.__QueOnConds(que_1, [c_rot, c_rec])

        val_cond = [c_rot, c_rec, c_v60, c_840]
        val = self.__QueOnConds(que_1, val_cond)
        val_0 = self.__QueOnConds(que_1, val_cond.append(c_0))
        val_1 = self.__QueOnConds(que_1, val_cond.append(c_1))

        getlen = lambda x, y: len(x.group_by(y))

        with open(save_path / 'table_info.txt', 'w') as f:
            pass

        return val